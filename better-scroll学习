<template>
<!--  better-scroll的参数el要求被滚动的标签被包裹在外面标签内,而且外面标签内里面只能包含一个标签
      下面div里,只能有一个ul标签,不能有其他标签,但是ul内部是可以包含多个标签的
-->
 <div class="wrapper">
   <ul>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
     <li>列表</li>
   </ul>

 </div>

</template>

<script>
  import BetterScroll from 'better-scroll'
  export default {
  name: 'Category',
    /*
     *vue中created钩子函数和mounted钩子函数的区别:
     * created是在实例创建完成后,立即调用,在这一步,实例已经完成以下配置
     * :数据观测,属性和方法的运算,watch/event事件回调.但是挂载阶段还没有开始
     * $el属性目前不可见,也就是说,模板还没有被渲染成html,这时候无法通过id什么的去查找
     * 页面元素.
     *
     * 想要使用在挂载阶段开始的el属性,就必须使用mounted函数初始化
    * */
    mounted () {
      // new BetterScroll 第一个参数是el:格式是 .类名,第二个参数是对象
      const BScroll = new BetterScroll('.wrapper',{
        probeType:3, //probe侦测的意思,如果想要监听页面实时滚动的坐标位置,那么必须在第二个参数的对象里设置probeType属性
        //probeType的值默认是0,不监听,1也不会监听,2表示只有手在上面拉的时候监听,一旦手离开,惯性的拉动是不会监听
        //probeType的值是3的时候,表示只要是滚动就会被监听,惯性的滚动也会被实时监听.
        //监听步骤: 第一步是设置probeType属性的值为3,或2,然后用BScroll这个实例的on方法去监听
        pullUpLoad:true //想要上拉加载更多,需要把 pullUpLoad属性设置为true
      })

      //BScroll.on()方法实时监听坐标位置,on里第一个参数是监听什么类型的事件,字符串格式的参数,第二个参数是一个
      //函数,函数的参数是position表示具体的坐标.
      BScroll.on('scroll', (position) => {
        console.log(position);
      })
      //pullingUp是上拉事件,第二个参数也是函数,而且函数没参数,只要监听到这个上拉事件,就可以在函数体执行自己想要的事情
      BScroll.on('pullingUp',() => {
        console.log('上拉加载更多');
        //上面的监听上拉事件,默认往上拉一次,就不能再监听了,为了持续监听,必须调用BScroll.finishPullUp()方法,可以把这个方法放入定时器,每隔时间段执行一次.
        setTimeout(() =>{
          BScroll.finishPullUp()
        },500)

      })



    }

}
</script>

<style scoped>
  .wrapper {
    /*设置在某个区域内滚动,需要给元素设置高度*/
    height:150px;
    background: red;
    /*overflow: 溢出,淹没,flow是流的意思,下面代码表示下拉或上拉页面超过屏幕就在y轴上滚动
     超过设置高度的内容会自动隐藏
    */
    overflow-y:scroll;
  }
</style>
